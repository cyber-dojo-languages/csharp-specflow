#!/bin/bash

# Controls a cyber-dojo web server.
# The aim is for all commands to forward to
# the cyber-dojo commander container.
# However, three commands have to be handled locally. Viz:
#
#  1) ./cyber-dojo sh
#  2) ./cyber-dojo update
#  3) ./cyber-dojo start-point create NAME --dir=DIR
#  4) ./cyber-dojo start-point create NAME --list=URL|FILE
#
#  1) provides an interactive terminal.
#  2) replaces this script.
#  3) needs to volume mount local DIR.
#  4) needs to volume mount local URL|FILE

# requires: awk, curl, sed, grep which are in DockerToolbox
# quickstart terminal.

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

exit_fail()
{
  if [ "$*" != '' ]; then
    >&2 echo "FAILED: $*"
  fi
  exit 1
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

cyber_dojo_commander=cyberdojo/commander

delegate_to_commander()
{
  local my_dir="$( cd "$( dirname "${0}" )" && pwd )"

  if [ "${1}" == 'up' ];  then
    if [ -f ${my_dir}/nginx.env ];  then
      local volume_nginx_env_file="--volume=${my_dir}/nginx.env:/app/nginx.env"
    fi
    if [ -f ${my_dir}/grafana.env ];  then
      local volume_grafana_env_file="--volume=${my_dir}/grafana.env:/app/grafana.env"
    fi
    if [ ! -f ${my_dir}/grafana.env ];  then
      echo 'WARNING: Using default grafana admin password.'
      echo 'To set your own password and remove this warning:'
      echo '   1. Add a file grafana.env with contents GF_SECURITY_ADMIN_PASSWORD=mypassword'
      echo '      in the same directory as the cyber-dojo script.'
      echo '   2. Re-issue the cyberdojo up command.'
    fi
  fi

  # start-point create --dir=DIR
  if [ "$1" == 'start-point' ] && [ "$2" == 'create' ]; then
    local lhs=$(echo $4 | cut -f1 -s -d=)
    local value=$(echo $4 | cut -f2 -s -d=)

    if [ "${lhs}" == '--dir' ] && [ "${value}" != '' ] && [ "$5" == '' ]; then
      if [ ! -d ${value} ]; then
        exit_fail "dir ${value} does not exist"
      fi
      local volume_start_point="--volume=${value}:${value}"
    fi

    if [ "${lhs}" == '--list' ] && [ "$5" == '' ]; then
      if [ "${value:0:1}" == "/" ]; then
        if [ -f ${value} ]; then
          local volume_start_point="--volume=${value}:${value}"
        else
          exit_fail "${value} does not exist"
        fi
      elif [ "${value:0:7}" == "file://" ]; then
        if [ -f ${value:7} ]; then
          local volume_start_point="--volume=${value:7}:${value:7}"
        else
          exit_fail "${value} does not exist"
        fi
      else # network URL
        if ! curl --output /dev/null --silent --head --fail "${value}"; then
          exit_fail "${value} does not exist"
        fi
      fi # --list=file://
    fi # --list
  fi # start-point create

  if [ "${debug_on}" == 'true' ]; then
    local debug_option='--debug'
  fi

  docker run \
    --rm \
    --user=root \
    --volume=/var/run/docker.sock:/var/run/docker.sock \
    ${volume_grafana_env_file} \
    ${volume_nginx_env_file} \
    ${volume_start_point} \
      ${cyber_dojo_commander} \
        /app/cyber-dojo.rb ${debug_option} $*
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

handle_sh_locally()
{
  local name='cyber-dojo-web'
  if running_container ${name}; then
    docker exec --interactive --tty ${name} sh
  else
    exit_fail "${name} is not running"
  fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

running_container()
{
  local space='\s'
  local name=$1
  local end_of_line='$'
  docker ps --filter "name=${name}" | grep "${space}${name}${end_of_line}" > /dev/null
  return $?
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

handle_update_locally()
{
  if [ "$2" == '' ]; then
    replace_myself
  fi
  if [ "$2" == 'server' ] && [ "$3" == '' ]; then
    replace_myself
  fi
}

replace_myself()
{
  # See https://bani.com.br/2013/04/shell-script-that-updates-itself/
  local cid=$(docker create --interactive ${cyber_dojo_commander} sh)
  docker cp ${cid}:/app/cyber-dojo /tmp
  docker rm ${cid} > /dev/null
  local new_me=/tmp/cyber-dojo
  chmod +x ${new_me}
  cp ${new_me} $0
  rm ${new_me}
}

#==========================================================

if ! hash docker 2> /dev/null; then
  echo 'docker is not installed'
  echo 'See http://blog.cyber-dojo.org/2016/08/running-your-own-cyber-dojo-web-server.html'
  exit_fail
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

if [ "$1" == '--debug' ]; then
  debug_on='true'
  shift
else
  debug_on='false'
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

if [ "$1" == 'update' ]; then
  if [ "$2" == '' ]; then
    docker pull ${cyber_dojo_commander}
  fi
  if [ "$2" == 'server' ] && [ "$3" == '' ]; then
    docker pull ${cyber_dojo_commander}
  fi
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

delegate_to_commander $*

if [ $? != 0 ]; then
  exit_fail
fi

if [ "$*" = "sh" ]; then
  handle_sh_locally $*
fi
if [ "$1" == 'update' ]; then
  handle_update_locally $*
fi
